{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Searchbar.js","Components/ErrorBoundry.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","email","name","className","alt","src","Cardlist","robots","map","user","i","key","Searchbar","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","toLowerCase","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCESC,EAjBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACtB,OACK,yBAAKC,UAAU,UACZ,yBAAKA,UAAU,4DACf,6BACI,yBAAKC,IAAI,QAAQC,IAAG,oDAAgDL,EAAhD,YAA8DG,UAAU,MAEhG,6BACI,wBAAIA,UAAU,UAAWD,GACzB,uBAAGC,UAAU,mBAAoBF,OCMlCK,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAKf,OACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIO,EAAOG,GAAGV,GAAIE,KAAMK,EAAOG,GAAGR,KAAMD,MAAOM,EAAOG,GAAGT,YCGxEW,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,yBAAKX,UAAU,OACX,2BACIY,KAAK,SACLC,YAAY,gBACZb,UAAU,mCAAmCc,SAAWH,MCezDI,G,kBApBX,WAAYC,GAAO,IAAD,8BACd,+CACKC,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAA2B,IAAxBG,KAAKJ,MAAMC,SACH,4DAEJG,KAAKL,MAAMO,a,GAhBCC,cC8CZC,E,YAxCX,aAAc,IAAD,8BACT,+CAaJC,eAAgB,SAACC,GACb,EAAKL,SAAS,CAACZ,YAAaiB,EAAMC,OAAOC,SAbzC,EAAKZ,MAAO,CACRb,OAAQ,GACRM,YAAa,IAJR,E,iFAQO,IAAD,OACfoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAAElB,OAAQ8B,S,+BAOjC,IAAD,EACyBb,KAAKJ,MAA3Bb,EADH,EACGA,OAAQM,EADX,EACWA,YACTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,oBAAoBC,SAAS7B,EAAY8B,kBAE/D,OACI,yBAAKxC,UAAU,MACX,yBAAKA,UAAU,WACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcU,KAAKK,kBAElC,yBAAK1B,UAAU,iCACX,kBAAC,EAAD,KACI,kBAAE,EAAF,CAAWI,OAAS+B,W,GAhC1BX,aCClBiB,IAASC,OAAO,kBAAE,EAAF,MAAUC,SAASC,eAAe,SN2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.a9b403ac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id, email, name}) => {\r\n    return(\r\n         <div className=\"tc ma2\" >\r\n            <div className=\"mw5 center bg-white br3 mv3 ba b--black-10 grow shadow-5\">\r\n            <div>\r\n                <img alt='robot' src ={`https://robohash.org/https://robohash.org/${id}?200x200`} className=\"\" />\r\n            </div>\r\n            <div>\r\n                <h2 className=\"f3 mb2\">{ name }</h2>\r\n                <p className=\"f5 fw4 gray mto\">{ email }</p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst Cardlist = ({robots}) =>{\r\n    //The way to test the error boundry\r\n    // if(true){\r\n    //    throw new Error(\"nooooooooooooooooooooooo\");\r\n    // }\r\n    return(\r\n        robots.map((user, i)=>{\r\n            return(\r\n                <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n            );\r\n        })\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbar = ({searchfield, searchChange}) =>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                type=\"search\" \r\n                placeholder='Search Robots' \r\n                className='bg-lightest-blue pa3 b--green ba' onChange={ searchChange }/>\r\n    \r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React, { Component }from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError === true){\r\n            return <h1>Oppss! There's been an error</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport Cardlist from'../Components/Cardlist';\r\n// import { robots } from './robots';\r\nimport Searchbar from'../Components/Searchbar';\r\nimport './App.css';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            robots: [],\r\n            searchfield: ''\r\n        } \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=> this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChange= (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield} =this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        return(\r\n            <div className='tc'>\r\n                <div className=\"top-bar\">\r\n                    <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n                    <Searchbar searchChange={this.onSearchChange}/>\r\n                </div>\r\n                <div className=\"flex flex-wrap justify-center\">\r\n                    <ErrorBoundry>\r\n                        < Cardlist robots={ filteredRobots }/>\r\n                    </ErrorBoundry>\r\n                </div>\r\n            </div>\r\n          \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import './robots';\nimport App from './Containers/App';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}